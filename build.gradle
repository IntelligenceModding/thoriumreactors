buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://maven.parchmentmc.org' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'org.parchmentmc:librarian:1.+'
    }
}

plugins {
    id 'net.minecraftforge.gradle' version '5.1.+'
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.parchmentmc.librarian.forgegradle'

group = 'unhappycodings'
version = "${mc_version}-${mod_version}"

java {
    archivesBaseName = 'thoriumreactors'
    toolchain.languageVersion = JavaLanguageVersion.of(17)
}

minecraft {
    mappings channel: "${mappings_channel}", version: "${mappings_version}"

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'thoriumreactors'

            mods {
                thoriumreactors {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'thoriumreactors'

            mods {
                thoriumreactors {
                    source sourceSets.main
                }
            }
        }

        gameTestServer {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'thoriumreactors'

            mods {
                thoriumreactors {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            args '--mod', 'thoriumreactors', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                thoriumreactors {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven {
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    maven {
        name = "Intelligence Space repository"
        url = "https://maven.pkg.jetbrains.space/intelligence/p/advancedperipherals/ap-repository"
        credentials {
            username = spaceUsername
            password = spacePassword
        }
    }
    flatDir {
        dirs 'lib'
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"

    implementation fg.deobf("team.chisel.ctm:CTM:${ctm_version}")

    implementation fg.deobf("curse.maven:mek-${mek_version}")
    implementation fg.deobf("curse.maven:mekgen-${mekgen_version}")
    implementation fg.deobf("curse.maven:jei-${jei_version}")
    //runtimeOnly fg.deobf("curse.maven:biggerreactors-${biggerreactors_version}")
    //runtimeOnly fg.deobf("curse.maven:corezero-${corezero_version}")
}

jar {
    manifest {
        attributes([
            "Specification-Title"     : "thoriumreactors",
            "Specification-Vendor"    : "UnhappyWithoutU",
            "Specification-Version"   : "${mod_version}",
            "Implementation-Title"    : project.name,
            "Implementation-Version"  : "${mod_version}",
            "Implementation-Vendor"   : "UnhappyWithoutU",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

jar.finalizedBy('reobfJar')

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}
