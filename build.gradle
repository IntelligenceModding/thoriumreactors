import java.util.function.Consumer

plugins {
    id "java"
    id "maven-publish"
    id 'net.neoforged.gradle' version '[6.0.18,6.2)'
    id 'org.spongepowered.mixin' version '0.7.+'
    id "org.jetbrains.kotlin.jvm" version "1.6.10"
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
}

version = "${mc_version}-${mod_version}"
archivesBaseName = 'thoriumreactors'
group = 'unhappycodings'

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

minecraft {
    mappings channel: "${mappings_channel}", version: "${mappings_version}"

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')
            arg "-mixin.config=thoriumreactors.mixins.json"

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'thoriumreactors'

            mods {
                thoriumreactors {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            arg "-mixin.config=thoriumreactors.mixins.json"

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'thoriumreactors'

            mods {
                thoriumreactors {
                    source sourceSets.main
                }
            }
        }

        gameTestServer {
            workingDirectory project.file('run')
            arg "-mixin.config=thoriumreactors.mixins.json"

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'thoriumreactors'

            mods {
                thoriumreactors {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            args '--mod', 'thoriumreactors', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                thoriumreactors {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

void exclusiveRepo(RepositoryHandler handler, String url, String... groups) {
    exclusiveRepo(handler, url, filter -> {
        for (def group : groups) {
            filter.includeGroup(group)
        }
    })
}

//Note: This cannot be static so that fg.repository can be properly accessed
@SuppressWarnings('GrMethodMayBeStatic')
void exclusiveRepo(RepositoryHandler handler, String url, Consumer<InclusiveRepositoryContentDescriptor> filterSetup) {
    handler.exclusiveContent {
        it.forRepositories(handler.maven {
            setUrl(url)
        }, fg.repository)//Add FG's repo so we make sure we are able to then find the mapped deps
        it.filter { f -> filterSetup.accept(f) }
    }
}

repositories { RepositoryHandler handler ->
    maven {
        name = "Intelligence Minecraft repository"
        url = "https://mvn.intelligence-modding.de/Minecraft"
    }
    maven {
        url "https://squiddev.cc/maven/"
        content {
            includeGroup("cc.tweaked")
            includeModule("org.squiddev", "Cobalt")
        }
    }
    exclusiveRepo(handler, 'https://jitpack.io', 'com.github.llamalad7.mixinextras')
    exclusiveRepo(handler, 'https://www.cursemaven.com', 'curse.maven')
    exclusiveRepo(handler, 'https://maven.parchmentmc.org/', 'org.parchmentmc.data')
}

dependencies {
    minecraft "net.neoforged:forge:${mc_version}-${neoforge_version}"

    // Apply Mixin API
    implementation(annotationProcessor("com.github.llamalad7.mixinextras:mixinextras-common:${mixin_extras_version}"))
    implementation(jarJar("com.github.llamalad7.mixinextras:mixinextras-forge:${mixin_extras_version}")) {
        jarJar.ranged(it, "[${mixin_extras_version},)")
    }
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'

    // Implementation for API usage
    implementation fg.deobf("curse.maven:jei-${jei_version}")
    implementation fg.deobf("curse.maven:top-${top_version}")
    implementation fg.deobf("curse.maven:fusion-${fusion_version}")
    implementation fg.deobf("cc.tweaked:cc-tweaked-1.20.1-forge:${cc_version}")

    // Runtime only
    runtimeOnly fg.deobf("curse.maven:mek-${mek_version}")
    runtimeOnly fg.deobf("curse.maven:mekgen-${mekgen_version}")
    runtimeOnly fg.deobf("curse.maven:we-${we_version}")
}

mixin {
    add sourceSets.main, "thoriumreactors.refmap.json"
}

// Example for how to get properties into the manifest for reading at runtime.
tasks.named('jar', Jar).configure {
    manifest {
        attributes([
                "Specification-Title"     : "thoriumreactors",
                "Specification-Vendor"    : "UnhappyWithoutU",
                "Specification-Version"   : "${mod_version}",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : "${mod_version}",
                "Implementation-Vendor"   : "UnhappyWithoutU",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs"            : "thoriumreactors.mixins.json"
        ])
    }

    // This is the preferred method to reobfuscate your jar file
    finalizedBy 'reobfJar'
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}
